services:
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_PROCESS_AGENT_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    ports:
      - "8126:8126"  # APM
      - "8125:8125/udp"  # DogStatsD
    restart: unless-stopped

  backend:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
    container_name: backend-service
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=development
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_SERVICE=backend-service
      - DD_ENV=development
      - DD_VERSION=1.0.0
      - DD_LOGS_INJECTION=true
      - DD_TRACE_SAMPLE_RATE=1
    depends_on:
      - datadog-agent
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: frontend-service
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - BACKEND_URL=http://backend:3001
      - NODE_ENV=development
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_SERVICE=frontend-service
      - DD_ENV=development
      - DD_VERSION=1.0.0
      - DD_LOGS_INJECTION=true
      - DD_TRACE_SAMPLE_RATE=1
    depends_on:
      backend:
        condition: service_healthy
      datadog-agent:
        condition: service_started
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

networks:
  default:
    name: microservices-network
